Wrangling

#df.dropna(subset = [NAME OF COLUMN], axis= 0. inplace = True) gets rid of NaN values

#mean = df[NAME OF COLUMN].mean()
#df[NAME OF COLUMN].replace(np.nan, mean)
#df[new column] = 234/df["column to be converted"]

#dataframe.dtypes() to identify data type or.astype to convert data type
#df["price"] = df["price"].astype("int")

#normalisation methods:
#1 simple feature df["length"] = df[";ength"]/df[length].max
#2 minmanx  = df[thing] = (df[thing] - df[thing].min()) / 
                          (df[thing].max()) - df[thing].min())
                     
#zscore df[thing] - (dfthing] - df[thing].mean())/df[thing].std()


binning
#bins = np.linspace(min(df[thing]), max(df[thing]), 4)
#group_names = ['one', 'two', 'three']
df[thingbinned] = pd.cut(df[thing], bins, labels = group_names, include_lowest = True)

#pd.get_dummies(df[fuel])


Exploratory data analysis

#df.describe()
#drive_wheels_counts = df['drive-wheels'].value_counts().to_frame()
#drive_wheels_counts.rename(columns = {'drive-wheels':'value_counts'), inplace = True)

#sns.boxplot(x = 'drive-wheels', y='price', data=df)
#y=df['price']
#x=df['engine-size']
#plt.scatter(x,y)
#plt.title('title')
#plt.xlabel('xlabel')
#plt.ylabel('ylabel')

#df_test = df[['drive-wheels', 'body-style'.....]]
#df_grp = df_test.groupby(['drive-wheels', 'body-style'], as_index=False).mean()
#df_grp

#df_pivolt = df_grp.pivot(index='drive_wheels',columns='body-style')

#plt.polor(df_pivot, cmal='RdBlu')
#plt.colorbar()
#plt.show()

#sns.regplot(x='engine-size", y='price', data=df)
#plt.ylim(0,)

#df_anova=df[[ind, dep]]
grouped_anova = df_anova.groupvy([ind])

pearson_cel, p_value = stats.pearsonr(df[independent], df[dependent])



Model Development

Model evaluation

